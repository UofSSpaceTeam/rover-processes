
Rover Processes
===============

All the rover processes can run independently by simply running them
with a Python interpreter, but usually will talk to each other
via the `robocluster`_ library. We break up the rover software into modular
components to make development easier and more focused, and to isolate
functionality of components to do more or less one thing. It's the Unix philosophy
applied to robotics; Do one thing and do it well. Though maybe some of the processes
in here don't necessarily do it very well... :)

To make the rover act like just an RC car, you need 3 processes:

* USBmanager
* DriveProcess
* JoystickProcess

I'll take off the ``.py`` extension when referring to processes through out
this documentation.
When these processes are running, data is generated by the JoystickProcess
(by reading the operator's input from an xbox controller), fed into the
DriveProcess (which handles how the user input corresponds to rover movement),
and then flows to the USBmanager which writes the speed values generated by
the DriveProcess to the motor controllers (which are connected via USB).
For most of the rover's functionality, you can think of data flowing from a source,
through some intermediate processing, and ending up at a sink. Sources are typically
a sensor or user controls, sinks are typically motors, actuators, or displays on
the web UI.

.. figure:: _static/Basic\ Rover\ Processes.png
    :align: center

.. _robocluster: https://github.com/UofSSpaceTeam/robocluster
